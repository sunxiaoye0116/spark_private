package org.apache.spark.bold.network.broadcast;

/**
 * Created by xs6 on 5/11/16.
 * <p>
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * @generated Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * @generated
 */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */


import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class RequestReturn implements org.apache.thrift.TBase<RequestReturn, RequestReturn._Fields>, java.io.Serializable, Cloneable, Comparable<RequestReturn> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestReturn");

    private static final org.apache.thrift.protocol.TField ACCEPT_FIELD_DESC = new org.apache.thrift.protocol.TField("accept", org.apache.thrift.protocol.TType.BOOL, (short) 1);
    private static final org.apache.thrift.protocol.TField GROUP_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("groupAddr", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.DOUBLE, (short) 3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

    static {
        schemes.put(StandardScheme.class, new RequestReturnStandardSchemeFactory());
        schemes.put(TupleScheme.class, new RequestReturnTupleSchemeFactory());
    }

    public boolean accept; // required
    public String groupAddr; // required
    public double time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        ACCEPT((short) 1, "accept"),
        GROUP_ADDR((short) 2, "groupAddr"),
        TIME((short) 3, "time");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // ACCEPT
                    return ACCEPT;
                case 2: // GROUP_ADDR
                    return GROUP_ADDR;
                case 3: // TIME
                    return TIME;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __ACCEPT_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.ACCEPT, new org.apache.thrift.meta_data.FieldMetaData("accept", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
        tmpMap.put(_Fields.GROUP_ADDR, new org.apache.thrift.meta_data.FieldMetaData("groupAddr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestReturn.class, metaDataMap);
    }

    public RequestReturn() {
    }

    public RequestReturn(
            boolean accept,
            String groupAddr,
            double time) {
        this();
        this.accept = accept;
        setAcceptIsSet(true);
        this.groupAddr = groupAddr;
        this.time = time;
        setTimeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RequestReturn(RequestReturn other) {
        __isset_bitfield = other.__isset_bitfield;
        this.accept = other.accept;
        if (other.isSetGroupAddr()) {
            this.groupAddr = other.groupAddr;
        }
        this.time = other.time;
    }

    public RequestReturn deepCopy() {
        return new RequestReturn(this);
    }

    @Override
    public void clear() {
        setAcceptIsSet(false);
        this.accept = false;
        this.groupAddr = null;
        setTimeIsSet(false);
        this.time = 0.0;
    }

    public boolean isAccept() {
        return this.accept;
    }

    public RequestReturn setAccept(boolean accept) {
        this.accept = accept;
        setAcceptIsSet(true);
        return this;
    }

    public void unsetAccept() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCEPT_ISSET_ID);
    }

    /** Returns true if field accept is set (has been assigned a value) and false otherwise */
    public boolean isSetAccept() {
        return EncodingUtils.testBit(__isset_bitfield, __ACCEPT_ISSET_ID);
    }

    public void setAcceptIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCEPT_ISSET_ID, value);
    }

    public String getGroupAddr() {
        return this.groupAddr;
    }

    public RequestReturn setGroupAddr(String groupAddr) {
        this.groupAddr = groupAddr;
        return this;
    }

    public void unsetGroupAddr() {
        this.groupAddr = null;
    }

    /** Returns true if field groupAddr is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupAddr() {
        return this.groupAddr != null;
    }

    public void setGroupAddrIsSet(boolean value) {
        if (!value) {
            this.groupAddr = null;
        }
    }

    public double getTime() {
        return this.time;
    }

    public RequestReturn setTime(double time) {
        this.time = time;
        setTimeIsSet(true);
        return this;
    }

    public void unsetTime() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
        return EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case ACCEPT:
                if (value == null) {
                    unsetAccept();
                } else {
                    setAccept((Boolean) value);
                }
                break;

            case GROUP_ADDR:
                if (value == null) {
                    unsetGroupAddr();
                } else {
                    setGroupAddr((String) value);
                }
                break;

            case TIME:
                if (value == null) {
                    unsetTime();
                } else {
                    setTime((Double) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case ACCEPT:
                return Boolean.valueOf(isAccept());

            case GROUP_ADDR:
                return getGroupAddr();

            case TIME:
                return Double.valueOf(getTime());

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case ACCEPT:
                return isSetAccept();
            case GROUP_ADDR:
                return isSetGroupAddr();
            case TIME:
                return isSetTime();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof RequestReturn)
            return this.equals((RequestReturn) that);
        return false;
    }

    public boolean equals(RequestReturn that) {
        if (that == null)
            return false;

        boolean this_present_accept = true;
        boolean that_present_accept = true;
        if (this_present_accept || that_present_accept) {
            if (!(this_present_accept && that_present_accept))
                return false;
            if (this.accept != that.accept)
                return false;
        }

        boolean this_present_groupAddr = true && this.isSetGroupAddr();
        boolean that_present_groupAddr = true && that.isSetGroupAddr();
        if (this_present_groupAddr || that_present_groupAddr) {
            if (!(this_present_groupAddr && that_present_groupAddr))
                return false;
            if (!this.groupAddr.equals(that.groupAddr))
                return false;
        }

        boolean this_present_time = true;
        boolean that_present_time = true;
        if (this_present_time || that_present_time) {
            if (!(this_present_time && that_present_time))
                return false;
            if (this.time != that.time)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    @Override
    public int compareTo(RequestReturn other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetAccept()).compareTo(other.isSetAccept());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetAccept()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accept, other.accept);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetGroupAddr()).compareTo(other.isSetGroupAddr());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetGroupAddr()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupAddr, other.groupAddr);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RequestReturn(");
        boolean first = true;

        sb.append("accept:");
        sb.append(this.accept);
        first = false;
        if (!first) sb.append(", ");
        sb.append("groupAddr:");
        if (this.groupAddr == null) {
            sb.append("null");
        } else {
            sb.append(this.groupAddr);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("time:");
        sb.append(this.time);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class RequestReturnStandardSchemeFactory implements SchemeFactory {
        public RequestReturnStandardScheme getScheme() {
            return new RequestReturnStandardScheme();
        }
    }

    private static class RequestReturnStandardScheme extends StandardScheme<RequestReturn> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, RequestReturn struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true) {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // ACCEPT
                        if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                            struct.accept = iprot.readBool();
                            struct.setAcceptIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // GROUP_ADDR
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.groupAddr = iprot.readString();
                            struct.setGroupAddrIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TIME
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                            struct.time = iprot.readDouble();
                            struct.setTimeIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, RequestReturn struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(ACCEPT_FIELD_DESC);
            oprot.writeBool(struct.accept);
            oprot.writeFieldEnd();
            if (struct.groupAddr != null) {
                oprot.writeFieldBegin(GROUP_ADDR_FIELD_DESC);
                oprot.writeString(struct.groupAddr);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TIME_FIELD_DESC);
            oprot.writeDouble(struct.time);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class RequestReturnTupleSchemeFactory implements SchemeFactory {
        public RequestReturnTupleScheme getScheme() {
            return new RequestReturnTupleScheme();
        }
    }

    private static class RequestReturnTupleScheme extends TupleScheme<RequestReturn> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, RequestReturn struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetAccept()) {
                optionals.set(0);
            }
            if (struct.isSetGroupAddr()) {
                optionals.set(1);
            }
            if (struct.isSetTime()) {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetAccept()) {
                oprot.writeBool(struct.accept);
            }
            if (struct.isSetGroupAddr()) {
                oprot.writeString(struct.groupAddr);
            }
            if (struct.isSetTime()) {
                oprot.writeDouble(struct.time);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, RequestReturn struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0)) {
                struct.accept = iprot.readBool();
                struct.setAcceptIsSet(true);
            }
            if (incoming.get(1)) {
                struct.groupAddr = iprot.readString();
                struct.setGroupAddrIsSet(true);
            }
            if (incoming.get(2)) {
                struct.time = iprot.readDouble();
                struct.setTimeIsSet(true);
            }
        }
    }

}


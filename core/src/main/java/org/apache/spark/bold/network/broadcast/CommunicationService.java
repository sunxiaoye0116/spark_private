package org.apache.spark.bold.network.broadcast;

/**
 * Created by xs6 on 5/11/16.
 * <p>
 * Autogenerated by Thrift Compiler (0.9.1)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 */


/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */


import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;

public class CommunicationService {

    public interface Iface {

        public boolean registerConnection(String srcAddr) throws org.apache.thrift.TException;

        public RequestReturn request(String srcAddr, int id, long trafficDemand, List<String> destAddr) throws org.apache.thrift.TException;

        public RequestReturn extend(String srcAddr, int id, long trafficDemand, List<String> destAddr) throws org.apache.thrift.TException;

        public boolean withdraw(String srcAddr, int id) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void registerConnection(String srcAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void request(String srcAddr, int id, long trafficDemand, List<String> destAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void extend(String srcAddr, int id, long trafficDemand, List<String> destAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void withdraw(String srcAddr, int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public Client(org.apache.thrift.protocol.TProtocol prot) {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public boolean registerConnection(String srcAddr) throws org.apache.thrift.TException {
            send_registerConnection(srcAddr);
            return recv_registerConnection();
        }

        public void send_registerConnection(String srcAddr) throws org.apache.thrift.TException {
            registerConnection_args args = new registerConnection_args();
            args.setSrcAddr(srcAddr);
            sendBase("registerConnection", args);
        }

        public boolean recv_registerConnection() throws org.apache.thrift.TException {
            registerConnection_result result = new registerConnection_result();
            receiveBase(result, "registerConnection");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerConnection failed: unknown result");
        }

        public RequestReturn request(String srcAddr, int id, long trafficDemand, List<String> destAddr) throws org.apache.thrift.TException {
            send_request(srcAddr, id, trafficDemand, destAddr);
            return recv_request();
        }

        public void send_request(String srcAddr, int id, long trafficDemand, List<String> destAddr) throws org.apache.thrift.TException {
            request_args args = new request_args();
            args.setSrcAddr(srcAddr);
            args.setId(id);
            args.setTrafficDemand(trafficDemand);
            args.setDestAddr(destAddr);
            sendBase("request", args);
        }

        public RequestReturn recv_request() throws org.apache.thrift.TException {
            request_result result = new request_result();
            receiveBase(result, "request");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "request failed: unknown result");
        }

        public RequestReturn extend(String srcAddr, int id, long trafficDemand, List<String> destAddr) throws org.apache.thrift.TException {
            send_extend(srcAddr, id, trafficDemand, destAddr);
            return recv_extend();
        }

        public void send_extend(String srcAddr, int id, long trafficDemand, List<String> destAddr) throws org.apache.thrift.TException {
            extend_args args = new extend_args();
            args.setSrcAddr(srcAddr);
            args.setId(id);
            args.setTrafficDemand(trafficDemand);
            args.setDestAddr(destAddr);
            sendBase("extend", args);
        }

        public RequestReturn recv_extend() throws org.apache.thrift.TException {
            extend_result result = new extend_result();
            receiveBase(result, "extend");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "extend failed: unknown result");
        }

        public boolean withdraw(String srcAddr, int id) throws org.apache.thrift.TException {
            send_withdraw(srcAddr, id);
            return recv_withdraw();
        }

        public void send_withdraw(String srcAddr, int id) throws org.apache.thrift.TException {
            withdraw_args args = new withdraw_args();
            args.setSrcAddr(srcAddr);
            args.setId(id);
            sendBase("withdraw", args);
        }

        public boolean recv_withdraw() throws org.apache.thrift.TException {
            withdraw_result result = new withdraw_result();
            receiveBase(result, "withdraw");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "withdraw failed: unknown result");
        }

        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void registerConnection(String srcAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            registerConnection_call method_call = new registerConnection_call(srcAddr, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void request(String srcAddr, int id, long trafficDemand, List<String> destAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            request_call method_call = new request_call(srcAddr, id, trafficDemand, destAddr, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void extend(String srcAddr, int id, long trafficDemand, List<String> destAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            extend_call method_call = new extend_call(srcAddr, id, trafficDemand, destAddr, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public void withdraw(String srcAddr, int id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            withdraw_call method_call = new withdraw_call(srcAddr, id, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public static class registerConnection_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String srcAddr;

            public registerConnection_call(String srcAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.srcAddr = srcAddr;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerConnection", org.apache.thrift.protocol.TMessageType.CALL, 0));
                registerConnection_args args = new registerConnection_args();
                args.setSrcAddr(srcAddr);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_registerConnection();
            }
        }

        public static class request_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String srcAddr;
            private int id;
            private long trafficDemand;
            private List<String> destAddr;

            public request_call(String srcAddr, int id, long trafficDemand, List<String> destAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.srcAddr = srcAddr;
                this.id = id;
                this.trafficDemand = trafficDemand;
                this.destAddr = destAddr;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("request", org.apache.thrift.protocol.TMessageType.CALL, 0));
                request_args args = new request_args();
                args.setSrcAddr(srcAddr);
                args.setId(id);
                args.setTrafficDemand(trafficDemand);
                args.setDestAddr(destAddr);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public RequestReturn getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_request();
            }
        }

        public static class extend_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String srcAddr;
            private int id;
            private long trafficDemand;
            private List<String> destAddr;

            public extend_call(String srcAddr, int id, long trafficDemand, List<String> destAddr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.srcAddr = srcAddr;
                this.id = id;
                this.trafficDemand = trafficDemand;
                this.destAddr = destAddr;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("extend", org.apache.thrift.protocol.TMessageType.CALL, 0));
                extend_args args = new extend_args();
                args.setSrcAddr(srcAddr);
                args.setId(id);
                args.setTrafficDemand(trafficDemand);
                args.setDestAddr(destAddr);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public RequestReturn getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_extend();
            }
        }

        public static class withdraw_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String srcAddr;
            private int id;

            public withdraw_call(String srcAddr, int id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.srcAddr = srcAddr;
                this.id = id;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("withdraw", org.apache.thrift.protocol.TMessageType.CALL, 0));
                withdraw_args args = new withdraw_args();
                args.setSrcAddr(srcAddr);
                args.setId(id);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_withdraw();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
            processMap.put("registerConnection", new registerConnection());
            processMap.put("request", new request());
            processMap.put("extend", new extend());
            processMap.put("withdraw", new withdraw());
            return processMap;
        }

        public static class registerConnection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerConnection_args> {
            public registerConnection() {
                super("registerConnection");
            }

            public registerConnection_args getEmptyArgsInstance() {
                return new registerConnection_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public registerConnection_result getResult(I iface, registerConnection_args args) throws org.apache.thrift.TException {
                registerConnection_result result = new registerConnection_result();
                result.success = iface.registerConnection(args.srcAddr);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class request<I extends Iface> extends org.apache.thrift.ProcessFunction<I, request_args> {
            public request() {
                super("request");
            }

            public request_args getEmptyArgsInstance() {
                return new request_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public request_result getResult(I iface, request_args args) throws org.apache.thrift.TException {
                request_result result = new request_result();
                result.success = iface.request(args.srcAddr, args.id, args.trafficDemand, args.destAddr);
                return result;
            }
        }

        public static class extend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, extend_args> {
            public extend() {
                super("extend");
            }

            public extend_args getEmptyArgsInstance() {
                return new extend_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public extend_result getResult(I iface, extend_args args) throws org.apache.thrift.TException {
                extend_result result = new extend_result();
                result.success = iface.extend(args.srcAddr, args.id, args.trafficDemand, args.destAddr);
                return result;
            }
        }

        public static class withdraw<I extends Iface> extends org.apache.thrift.ProcessFunction<I, withdraw_args> {
            public withdraw() {
                super("withdraw");
            }

            public withdraw_args getEmptyArgsInstance() {
                return new withdraw_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public withdraw_result getResult(I iface, withdraw_args args) throws org.apache.thrift.TException {
                withdraw_result result = new withdraw_result();
                result.success = iface.withdraw(args.srcAddr, args.id);
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("registerConnection", new registerConnection());
            processMap.put("request", new request());
            processMap.put("extend", new extend());
            processMap.put("withdraw", new withdraw());
            return processMap;
        }

        public static class registerConnection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerConnection_args, Boolean> {
            public registerConnection() {
                super("registerConnection");
            }

            public registerConnection_args getEmptyArgsInstance() {
                return new registerConnection_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        registerConnection_result result = new registerConnection_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        registerConnection_result result = new registerConnection_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, registerConnection_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.registerConnection(args.srcAddr, resultHandler);
            }
        }

        public static class request<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, request_args, RequestReturn> {
            public request() {
                super("request");
            }

            public request_args getEmptyArgsInstance() {
                return new request_args();
            }

            public AsyncMethodCallback<RequestReturn> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<RequestReturn>() {
                    public void onComplete(RequestReturn o) {
                        request_result result = new request_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        request_result result = new request_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, request_args args, org.apache.thrift.async.AsyncMethodCallback<RequestReturn> resultHandler) throws TException {
                iface.request(args.srcAddr, args.id, args.trafficDemand, args.destAddr, resultHandler);
            }
        }

        public static class extend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, extend_args, RequestReturn> {
            public extend() {
                super("extend");
            }

            public extend_args getEmptyArgsInstance() {
                return new extend_args();
            }

            public AsyncMethodCallback<RequestReturn> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<RequestReturn>() {
                    public void onComplete(RequestReturn o) {
                        extend_result result = new extend_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        extend_result result = new extend_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, extend_args args, org.apache.thrift.async.AsyncMethodCallback<RequestReturn> resultHandler) throws TException {
                iface.extend(args.srcAddr, args.id, args.trafficDemand, args.destAddr, resultHandler);
            }
        }

        public static class withdraw<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, withdraw_args, Boolean> {
            public withdraw() {
                super("withdraw");
            }

            public withdraw_args getEmptyArgsInstance() {
                return new withdraw_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        withdraw_result result = new withdraw_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        withdraw_result result = new withdraw_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, withdraw_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.withdraw(args.srcAddr, args.id, resultHandler);
            }
        }

    }

    public static class registerConnection_args implements org.apache.thrift.TBase<registerConnection_args, registerConnection_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerConnection_args> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerConnection_args");
        private static final org.apache.thrift.protocol.TField SRC_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("srcAddr", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new registerConnection_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new registerConnection_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC_ADDR, new org.apache.thrift.meta_data.FieldMetaData("srcAddr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerConnection_args.class, metaDataMap);
        }

        public String srcAddr; // required

        public registerConnection_args() {
        }

        public registerConnection_args(
                String srcAddr) {
            this();
            this.srcAddr = srcAddr;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public registerConnection_args(registerConnection_args other) {
            if (other.isSetSrcAddr()) {
                this.srcAddr = other.srcAddr;
            }
        }

        public registerConnection_args deepCopy() {
            return new registerConnection_args(this);
        }

        @Override
        public void clear() {
            this.srcAddr = null;
        }

        public String getSrcAddr() {
            return this.srcAddr;
        }

        public registerConnection_args setSrcAddr(String srcAddr) {
            this.srcAddr = srcAddr;
            return this;
        }

        public void unsetSrcAddr() {
            this.srcAddr = null;
        }

        /** Returns true if field srcAddr is set (has been assigned a value) and false otherwise */
        public boolean isSetSrcAddr() {
            return this.srcAddr != null;
        }

        public void setSrcAddrIsSet(boolean value) {
            if (!value) {
                this.srcAddr = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SRC_ADDR:
                    if (value == null) {
                        unsetSrcAddr();
                    } else {
                        setSrcAddr((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC_ADDR:
                    return getSrcAddr();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SRC_ADDR:
                    return isSetSrcAddr();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof registerConnection_args)
                return this.equals((registerConnection_args) that);
            return false;
        }

        public boolean equals(registerConnection_args that) {
            if (that == null)
                return false;

            boolean this_present_srcAddr = true && this.isSetSrcAddr();
            boolean that_present_srcAddr = true && that.isSetSrcAddr();
            if (this_present_srcAddr || that_present_srcAddr) {
                if (!(this_present_srcAddr && that_present_srcAddr))
                    return false;
                if (!this.srcAddr.equals(that.srcAddr))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(registerConnection_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSrcAddr()).compareTo(other.isSetSrcAddr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrcAddr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcAddr, other.srcAddr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("registerConnection_args(");
            boolean first = true;

            sb.append("srcAddr:");
            if (this.srcAddr == null) {
                sb.append("null");
            } else {
                sb.append(this.srcAddr);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC_ADDR((short) 1, "srcAddr");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC_ADDR
                        return SRC_ADDR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class registerConnection_argsStandardSchemeFactory implements SchemeFactory {
            public registerConnection_argsStandardScheme getScheme() {
                return new registerConnection_argsStandardScheme();
            }
        }

        private static class registerConnection_argsStandardScheme extends StandardScheme<registerConnection_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, registerConnection_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC_ADDR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.srcAddr = iprot.readString();
                                struct.setSrcAddrIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, registerConnection_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.srcAddr != null) {
                    oprot.writeFieldBegin(SRC_ADDR_FIELD_DESC);
                    oprot.writeString(struct.srcAddr);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class registerConnection_argsTupleSchemeFactory implements SchemeFactory {
            public registerConnection_argsTupleScheme getScheme() {
                return new registerConnection_argsTupleScheme();
            }
        }

        private static class registerConnection_argsTupleScheme extends TupleScheme<registerConnection_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, registerConnection_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSrcAddr()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSrcAddr()) {
                    oprot.writeString(struct.srcAddr);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, registerConnection_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.srcAddr = iprot.readString();
                    struct.setSrcAddrIsSet(true);
                }
            }
        }

    }

    public static class registerConnection_result implements org.apache.thrift.TBase<registerConnection_result, registerConnection_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerConnection_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerConnection_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new registerConnection_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new registerConnection_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerConnection_result.class, metaDataMap);
        }

        public boolean success; // required
        private byte __isset_bitfield = 0;

        public registerConnection_result() {
        }

        public registerConnection_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public registerConnection_result(registerConnection_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public registerConnection_result deepCopy() {
            return new registerConnection_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public registerConnection_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Boolean.valueOf(isSuccess());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof registerConnection_result)
                return this.equals((registerConnection_result) that);
            return false;
        }

        public boolean equals(registerConnection_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(registerConnection_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("registerConnection_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class registerConnection_resultStandardSchemeFactory implements SchemeFactory {
            public registerConnection_resultStandardScheme getScheme() {
                return new registerConnection_resultStandardScheme();
            }
        }

        private static class registerConnection_resultStandardScheme extends StandardScheme<registerConnection_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, registerConnection_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, registerConnection_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class registerConnection_resultTupleSchemeFactory implements SchemeFactory {
            public registerConnection_resultTupleScheme getScheme() {
                return new registerConnection_resultTupleScheme();
            }
        }

        private static class registerConnection_resultTupleScheme extends TupleScheme<registerConnection_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, registerConnection_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, registerConnection_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class request_args implements org.apache.thrift.TBase<request_args, request_args._Fields>, java.io.Serializable, Cloneable, Comparable<request_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("request_args");
        private static final org.apache.thrift.protocol.TField SRC_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("srcAddr", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.protocol.TField TRAFFIC_DEMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("trafficDemand", org.apache.thrift.protocol.TType.I64, (short) 3);
        private static final org.apache.thrift.protocol.TField DEST_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("destAddr", org.apache.thrift.protocol.TType.LIST, (short) 4);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private static final int __TRAFFICDEMAND_ISSET_ID = 1;

        static {
            schemes.put(StandardScheme.class, new request_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new request_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC_ADDR, new org.apache.thrift.meta_data.FieldMetaData("srcAddr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TRAFFIC_DEMAND, new org.apache.thrift.meta_data.FieldMetaData("trafficDemand", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.DEST_ADDR, new org.apache.thrift.meta_data.FieldMetaData("destAddr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(request_args.class, metaDataMap);
        }

        public String srcAddr; // required
        public int id; // required
        public long trafficDemand; // required
        public List<String> destAddr; // required
        private byte __isset_bitfield = 0;

        public request_args() {
        }

        public request_args(
                String srcAddr,
                int id,
                long trafficDemand,
                List<String> destAddr) {
            this();
            this.srcAddr = srcAddr;
            this.id = id;
            setIdIsSet(true);
            this.trafficDemand = trafficDemand;
            setTrafficDemandIsSet(true);
            this.destAddr = destAddr;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public request_args(request_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrcAddr()) {
                this.srcAddr = other.srcAddr;
            }
            this.id = other.id;
            this.trafficDemand = other.trafficDemand;
            if (other.isSetDestAddr()) {
                List<String> __this__destAddr = new ArrayList<String>(other.destAddr);
                this.destAddr = __this__destAddr;
            }
        }

        public request_args deepCopy() {
            return new request_args(this);
        }

        @Override
        public void clear() {
            this.srcAddr = null;
            setIdIsSet(false);
            this.id = 0;
            setTrafficDemandIsSet(false);
            this.trafficDemand = 0;
            this.destAddr = null;
        }

        public String getSrcAddr() {
            return this.srcAddr;
        }

        public request_args setSrcAddr(String srcAddr) {
            this.srcAddr = srcAddr;
            return this;
        }

        public void unsetSrcAddr() {
            this.srcAddr = null;
        }

        /** Returns true if field srcAddr is set (has been assigned a value) and false otherwise */
        public boolean isSetSrcAddr() {
            return this.srcAddr != null;
        }

        public void setSrcAddrIsSet(boolean value) {
            if (!value) {
                this.srcAddr = null;
            }
        }

        public int getId() {
            return this.id;
        }

        public request_args setId(int id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public long getTrafficDemand() {
            return this.trafficDemand;
        }

        public request_args setTrafficDemand(long trafficDemand) {
            this.trafficDemand = trafficDemand;
            setTrafficDemandIsSet(true);
            return this;
        }

        public void unsetTrafficDemand() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRAFFICDEMAND_ISSET_ID);
        }

        /** Returns true if field trafficDemand is set (has been assigned a value) and false otherwise */
        public boolean isSetTrafficDemand() {
            return EncodingUtils.testBit(__isset_bitfield, __TRAFFICDEMAND_ISSET_ID);
        }

        public void setTrafficDemandIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRAFFICDEMAND_ISSET_ID, value);
        }

        public int getDestAddrSize() {
            return (this.destAddr == null) ? 0 : this.destAddr.size();
        }

        public java.util.Iterator<String> getDestAddrIterator() {
            return (this.destAddr == null) ? null : this.destAddr.iterator();
        }

        public void addToDestAddr(String elem) {
            if (this.destAddr == null) {
                this.destAddr = new ArrayList<String>();
            }
            this.destAddr.add(elem);
        }

        public List<String> getDestAddr() {
            return this.destAddr;
        }

        public request_args setDestAddr(List<String> destAddr) {
            this.destAddr = destAddr;
            return this;
        }

        public void unsetDestAddr() {
            this.destAddr = null;
        }

        /** Returns true if field destAddr is set (has been assigned a value) and false otherwise */
        public boolean isSetDestAddr() {
            return this.destAddr != null;
        }

        public void setDestAddrIsSet(boolean value) {
            if (!value) {
                this.destAddr = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SRC_ADDR:
                    if (value == null) {
                        unsetSrcAddr();
                    } else {
                        setSrcAddr((String) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((Integer) value);
                    }
                    break;

                case TRAFFIC_DEMAND:
                    if (value == null) {
                        unsetTrafficDemand();
                    } else {
                        setTrafficDemand((Long) value);
                    }
                    break;

                case DEST_ADDR:
                    if (value == null) {
                        unsetDestAddr();
                    } else {
                        setDestAddr((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC_ADDR:
                    return getSrcAddr();

                case ID:
                    return Integer.valueOf(getId());

                case TRAFFIC_DEMAND:
                    return Long.valueOf(getTrafficDemand());

                case DEST_ADDR:
                    return getDestAddr();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SRC_ADDR:
                    return isSetSrcAddr();
                case ID:
                    return isSetId();
                case TRAFFIC_DEMAND:
                    return isSetTrafficDemand();
                case DEST_ADDR:
                    return isSetDestAddr();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof request_args)
                return this.equals((request_args) that);
            return false;
        }

        public boolean equals(request_args that) {
            if (that == null)
                return false;

            boolean this_present_srcAddr = true && this.isSetSrcAddr();
            boolean that_present_srcAddr = true && that.isSetSrcAddr();
            if (this_present_srcAddr || that_present_srcAddr) {
                if (!(this_present_srcAddr && that_present_srcAddr))
                    return false;
                if (!this.srcAddr.equals(that.srcAddr))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_trafficDemand = true;
            boolean that_present_trafficDemand = true;
            if (this_present_trafficDemand || that_present_trafficDemand) {
                if (!(this_present_trafficDemand && that_present_trafficDemand))
                    return false;
                if (this.trafficDemand != that.trafficDemand)
                    return false;
            }

            boolean this_present_destAddr = true && this.isSetDestAddr();
            boolean that_present_destAddr = true && that.isSetDestAddr();
            if (this_present_destAddr || that_present_destAddr) {
                if (!(this_present_destAddr && that_present_destAddr))
                    return false;
                if (!this.destAddr.equals(that.destAddr))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(request_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSrcAddr()).compareTo(other.isSetSrcAddr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrcAddr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcAddr, other.srcAddr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTrafficDemand()).compareTo(other.isSetTrafficDemand());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTrafficDemand()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trafficDemand, other.trafficDemand);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDestAddr()).compareTo(other.isSetDestAddr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDestAddr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destAddr, other.destAddr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("request_args(");
            boolean first = true;

            sb.append("srcAddr:");
            if (this.srcAddr == null) {
                sb.append("null");
            } else {
                sb.append(this.srcAddr);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("trafficDemand:");
            sb.append(this.trafficDemand);
            first = false;
            if (!first) sb.append(", ");
            sb.append("destAddr:");
            if (this.destAddr == null) {
                sb.append("null");
            } else {
                sb.append(this.destAddr);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC_ADDR((short) 1, "srcAddr"),
            ID((short) 2, "id"),
            TRAFFIC_DEMAND((short) 3, "trafficDemand"),
            DEST_ADDR((short) 4, "destAddr");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC_ADDR
                        return SRC_ADDR;
                    case 2: // ID
                        return ID;
                    case 3: // TRAFFIC_DEMAND
                        return TRAFFIC_DEMAND;
                    case 4: // DEST_ADDR
                        return DEST_ADDR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class request_argsStandardSchemeFactory implements SchemeFactory {
            public request_argsStandardScheme getScheme() {
                return new request_argsStandardScheme();
            }
        }

        private static class request_argsStandardScheme extends StandardScheme<request_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, request_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC_ADDR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.srcAddr = iprot.readString();
                                struct.setSrcAddrIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.id = iprot.readI32();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TRAFFIC_DEMAND
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.trafficDemand = iprot.readI64();
                                struct.setTrafficDemandIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // DEST_ADDR
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.destAddr = new ArrayList<String>(_list0.size);
                                    for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
                                        String _elem2;
                                        _elem2 = iprot.readString();
                                        struct.destAddr.add(_elem2);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setDestAddrIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, request_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.srcAddr != null) {
                    oprot.writeFieldBegin(SRC_ADDR_FIELD_DESC);
                    oprot.writeString(struct.srcAddr);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TRAFFIC_DEMAND_FIELD_DESC);
                oprot.writeI64(struct.trafficDemand);
                oprot.writeFieldEnd();
                if (struct.destAddr != null) {
                    oprot.writeFieldBegin(DEST_ADDR_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.destAddr.size()));
                        for (String _iter3 : struct.destAddr) {
                            oprot.writeString(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class request_argsTupleSchemeFactory implements SchemeFactory {
            public request_argsTupleScheme getScheme() {
                return new request_argsTupleScheme();
            }
        }

        private static class request_argsTupleScheme extends TupleScheme<request_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, request_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSrcAddr()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                if (struct.isSetTrafficDemand()) {
                    optionals.set(2);
                }
                if (struct.isSetDestAddr()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetSrcAddr()) {
                    oprot.writeString(struct.srcAddr);
                }
                if (struct.isSetId()) {
                    oprot.writeI32(struct.id);
                }
                if (struct.isSetTrafficDemand()) {
                    oprot.writeI64(struct.trafficDemand);
                }
                if (struct.isSetDestAddr()) {
                    {
                        oprot.writeI32(struct.destAddr.size());
                        for (String _iter4 : struct.destAddr) {
                            oprot.writeString(_iter4);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, request_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.srcAddr = iprot.readString();
                    struct.setSrcAddrIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI32();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.trafficDemand = iprot.readI64();
                    struct.setTrafficDemandIsSet(true);
                }
                if (incoming.get(3)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.destAddr = new ArrayList<String>(_list5.size);
                        for (int _i6 = 0; _i6 < _list5.size; ++_i6) {
                            String _elem7;
                            _elem7 = iprot.readString();
                            struct.destAddr.add(_elem7);
                        }
                    }
                    struct.setDestAddrIsSet(true);
                }
            }
        }

    }

    public static class request_result implements org.apache.thrift.TBase<request_result, request_result._Fields>, java.io.Serializable, Cloneable, Comparable<request_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("request_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new request_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new request_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestReturn.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(request_result.class, metaDataMap);
        }

        public RequestReturn success; // required

        public request_result() {
        }

        public request_result(
                RequestReturn success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public request_result(request_result other) {
            if (other.isSetSuccess()) {
                this.success = new RequestReturn(other.success);
            }
        }

        public request_result deepCopy() {
            return new request_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public RequestReturn getSuccess() {
            return this.success;
        }

        public request_result setSuccess(RequestReturn success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((RequestReturn) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof request_result)
                return this.equals((request_result) that);
            return false;
        }

        public boolean equals(request_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(request_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("request_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class request_resultStandardSchemeFactory implements SchemeFactory {
            public request_resultStandardScheme getScheme() {
                return new request_resultStandardScheme();
            }
        }

        private static class request_resultStandardScheme extends StandardScheme<request_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, request_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new RequestReturn();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, request_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class request_resultTupleSchemeFactory implements SchemeFactory {
            public request_resultTupleScheme getScheme() {
                return new request_resultTupleScheme();
            }
        }

        private static class request_resultTupleScheme extends TupleScheme<request_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, request_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, request_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new RequestReturn();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class extend_args implements org.apache.thrift.TBase<extend_args, extend_args._Fields>, java.io.Serializable, Cloneable, Comparable<extend_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extend_args");
        private static final org.apache.thrift.protocol.TField SRC_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("srcAddr", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final org.apache.thrift.protocol.TField TRAFFIC_DEMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("trafficDemand", org.apache.thrift.protocol.TType.I64, (short) 3);
        private static final org.apache.thrift.protocol.TField DEST_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("destAddr", org.apache.thrift.protocol.TType.LIST, (short) 4);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __ID_ISSET_ID = 0;
        private static final int __TRAFFICDEMAND_ISSET_ID = 1;

        static {
            schemes.put(StandardScheme.class, new extend_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new extend_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC_ADDR, new org.apache.thrift.meta_data.FieldMetaData("srcAddr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.TRAFFIC_DEMAND, new org.apache.thrift.meta_data.FieldMetaData("trafficDemand", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.DEST_ADDR, new org.apache.thrift.meta_data.FieldMetaData("destAddr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extend_args.class, metaDataMap);
        }

        public String srcAddr; // required
        public int id; // required
        public long trafficDemand; // required
        public List<String> destAddr; // required
        private byte __isset_bitfield = 0;

        public extend_args() {
        }

        public extend_args(
                String srcAddr,
                int id,
                long trafficDemand,
                List<String> destAddr) {
            this();
            this.srcAddr = srcAddr;
            this.id = id;
            setIdIsSet(true);
            this.trafficDemand = trafficDemand;
            setTrafficDemandIsSet(true);
            this.destAddr = destAddr;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public extend_args(extend_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrcAddr()) {
                this.srcAddr = other.srcAddr;
            }
            this.id = other.id;
            this.trafficDemand = other.trafficDemand;
            if (other.isSetDestAddr()) {
                List<String> __this__destAddr = new ArrayList<String>(other.destAddr);
                this.destAddr = __this__destAddr;
            }
        }

        public extend_args deepCopy() {
            return new extend_args(this);
        }

        @Override
        public void clear() {
            this.srcAddr = null;
            setIdIsSet(false);
            this.id = 0;
            setTrafficDemandIsSet(false);
            this.trafficDemand = 0;
            this.destAddr = null;
        }

        public String getSrcAddr() {
            return this.srcAddr;
        }

        public extend_args setSrcAddr(String srcAddr) {
            this.srcAddr = srcAddr;
            return this;
        }

        public void unsetSrcAddr() {
            this.srcAddr = null;
        }

        /** Returns true if field srcAddr is set (has been assigned a value) and false otherwise */
        public boolean isSetSrcAddr() {
            return this.srcAddr != null;
        }

        public void setSrcAddrIsSet(boolean value) {
            if (!value) {
                this.srcAddr = null;
            }
        }

        public int getId() {
            return this.id;
        }

        public extend_args setId(int id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public long getTrafficDemand() {
            return this.trafficDemand;
        }

        public extend_args setTrafficDemand(long trafficDemand) {
            this.trafficDemand = trafficDemand;
            setTrafficDemandIsSet(true);
            return this;
        }

        public void unsetTrafficDemand() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRAFFICDEMAND_ISSET_ID);
        }

        /** Returns true if field trafficDemand is set (has been assigned a value) and false otherwise */
        public boolean isSetTrafficDemand() {
            return EncodingUtils.testBit(__isset_bitfield, __TRAFFICDEMAND_ISSET_ID);
        }

        public void setTrafficDemandIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRAFFICDEMAND_ISSET_ID, value);
        }

        public int getDestAddrSize() {
            return (this.destAddr == null) ? 0 : this.destAddr.size();
        }

        public java.util.Iterator<String> getDestAddrIterator() {
            return (this.destAddr == null) ? null : this.destAddr.iterator();
        }

        public void addToDestAddr(String elem) {
            if (this.destAddr == null) {
                this.destAddr = new ArrayList<String>();
            }
            this.destAddr.add(elem);
        }

        public List<String> getDestAddr() {
            return this.destAddr;
        }

        public extend_args setDestAddr(List<String> destAddr) {
            this.destAddr = destAddr;
            return this;
        }

        public void unsetDestAddr() {
            this.destAddr = null;
        }

        /** Returns true if field destAddr is set (has been assigned a value) and false otherwise */
        public boolean isSetDestAddr() {
            return this.destAddr != null;
        }

        public void setDestAddrIsSet(boolean value) {
            if (!value) {
                this.destAddr = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SRC_ADDR:
                    if (value == null) {
                        unsetSrcAddr();
                    } else {
                        setSrcAddr((String) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((Integer) value);
                    }
                    break;

                case TRAFFIC_DEMAND:
                    if (value == null) {
                        unsetTrafficDemand();
                    } else {
                        setTrafficDemand((Long) value);
                    }
                    break;

                case DEST_ADDR:
                    if (value == null) {
                        unsetDestAddr();
                    } else {
                        setDestAddr((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC_ADDR:
                    return getSrcAddr();

                case ID:
                    return Integer.valueOf(getId());

                case TRAFFIC_DEMAND:
                    return Long.valueOf(getTrafficDemand());

                case DEST_ADDR:
                    return getDestAddr();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SRC_ADDR:
                    return isSetSrcAddr();
                case ID:
                    return isSetId();
                case TRAFFIC_DEMAND:
                    return isSetTrafficDemand();
                case DEST_ADDR:
                    return isSetDestAddr();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof extend_args)
                return this.equals((extend_args) that);
            return false;
        }

        public boolean equals(extend_args that) {
            if (that == null)
                return false;

            boolean this_present_srcAddr = true && this.isSetSrcAddr();
            boolean that_present_srcAddr = true && that.isSetSrcAddr();
            if (this_present_srcAddr || that_present_srcAddr) {
                if (!(this_present_srcAddr && that_present_srcAddr))
                    return false;
                if (!this.srcAddr.equals(that.srcAddr))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            boolean this_present_trafficDemand = true;
            boolean that_present_trafficDemand = true;
            if (this_present_trafficDemand || that_present_trafficDemand) {
                if (!(this_present_trafficDemand && that_present_trafficDemand))
                    return false;
                if (this.trafficDemand != that.trafficDemand)
                    return false;
            }

            boolean this_present_destAddr = true && this.isSetDestAddr();
            boolean that_present_destAddr = true && that.isSetDestAddr();
            if (this_present_destAddr || that_present_destAddr) {
                if (!(this_present_destAddr && that_present_destAddr))
                    return false;
                if (!this.destAddr.equals(that.destAddr))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(extend_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSrcAddr()).compareTo(other.isSetSrcAddr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrcAddr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcAddr, other.srcAddr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTrafficDemand()).compareTo(other.isSetTrafficDemand());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetTrafficDemand()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trafficDemand, other.trafficDemand);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDestAddr()).compareTo(other.isSetDestAddr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetDestAddr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destAddr, other.destAddr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("extend_args(");
            boolean first = true;

            sb.append("srcAddr:");
            if (this.srcAddr == null) {
                sb.append("null");
            } else {
                sb.append(this.srcAddr);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            if (!first) sb.append(", ");
            sb.append("trafficDemand:");
            sb.append(this.trafficDemand);
            first = false;
            if (!first) sb.append(", ");
            sb.append("destAddr:");
            if (this.destAddr == null) {
                sb.append("null");
            } else {
                sb.append(this.destAddr);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC_ADDR((short) 1, "srcAddr"),
            ID((short) 2, "id"),
            TRAFFIC_DEMAND((short) 3, "trafficDemand"),
            DEST_ADDR((short) 4, "destAddr");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC_ADDR
                        return SRC_ADDR;
                    case 2: // ID
                        return ID;
                    case 3: // TRAFFIC_DEMAND
                        return TRAFFIC_DEMAND;
                    case 4: // DEST_ADDR
                        return DEST_ADDR;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class extend_argsStandardSchemeFactory implements SchemeFactory {
            public extend_argsStandardScheme getScheme() {
                return new extend_argsStandardScheme();
            }
        }

        private static class extend_argsStandardScheme extends StandardScheme<extend_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, extend_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC_ADDR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.srcAddr = iprot.readString();
                                struct.setSrcAddrIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.id = iprot.readI32();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // TRAFFIC_DEMAND
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.trafficDemand = iprot.readI64();
                                struct.setTrafficDemandIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // DEST_ADDR
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                                    struct.destAddr = new ArrayList<String>(_list8.size);
                                    for (int _i9 = 0; _i9 < _list8.size; ++_i9) {
                                        String _elem10;
                                        _elem10 = iprot.readString();
                                        struct.destAddr.add(_elem10);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setDestAddrIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, extend_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.srcAddr != null) {
                    oprot.writeFieldBegin(SRC_ADDR_FIELD_DESC);
                    oprot.writeString(struct.srcAddr);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(TRAFFIC_DEMAND_FIELD_DESC);
                oprot.writeI64(struct.trafficDemand);
                oprot.writeFieldEnd();
                if (struct.destAddr != null) {
                    oprot.writeFieldBegin(DEST_ADDR_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.destAddr.size()));
                        for (String _iter11 : struct.destAddr) {
                            oprot.writeString(_iter11);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class extend_argsTupleSchemeFactory implements SchemeFactory {
            public extend_argsTupleScheme getScheme() {
                return new extend_argsTupleScheme();
            }
        }

        private static class extend_argsTupleScheme extends TupleScheme<extend_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, extend_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSrcAddr()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                if (struct.isSetTrafficDemand()) {
                    optionals.set(2);
                }
                if (struct.isSetDestAddr()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetSrcAddr()) {
                    oprot.writeString(struct.srcAddr);
                }
                if (struct.isSetId()) {
                    oprot.writeI32(struct.id);
                }
                if (struct.isSetTrafficDemand()) {
                    oprot.writeI64(struct.trafficDemand);
                }
                if (struct.isSetDestAddr()) {
                    {
                        oprot.writeI32(struct.destAddr.size());
                        for (String _iter12 : struct.destAddr) {
                            oprot.writeString(_iter12);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, extend_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.srcAddr = iprot.readString();
                    struct.setSrcAddrIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI32();
                    struct.setIdIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.trafficDemand = iprot.readI64();
                    struct.setTrafficDemandIsSet(true);
                }
                if (incoming.get(3)) {
                    {
                        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.destAddr = new ArrayList<String>(_list13.size);
                        for (int _i14 = 0; _i14 < _list13.size; ++_i14) {
                            String _elem15;
                            _elem15 = iprot.readString();
                            struct.destAddr.add(_elem15);
                        }
                    }
                    struct.setDestAddrIsSet(true);
                }
            }
        }

    }

    public static class extend_result implements org.apache.thrift.TBase<extend_result, extend_result._Fields>, java.io.Serializable, Cloneable, Comparable<extend_result> {
        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("extend_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();

        static {
            schemes.put(StandardScheme.class, new extend_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new extend_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestReturn.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(extend_result.class, metaDataMap);
        }

        public RequestReturn success; // required

        public extend_result() {
        }

        public extend_result(
                RequestReturn success) {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public extend_result(extend_result other) {
            if (other.isSetSuccess()) {
                this.success = new RequestReturn(other.success);
            }
        }

        public extend_result deepCopy() {
            return new extend_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public RequestReturn getSuccess() {
            return this.success;
        }

        public extend_result setSuccess(RequestReturn success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((RequestReturn) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof extend_result)
                return this.equals((extend_result) that);
            return false;
        }

        public boolean equals(extend_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(extend_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("extend_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (success != null) {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class extend_resultStandardSchemeFactory implements SchemeFactory {
            public extend_resultStandardScheme getScheme() {
                return new extend_resultStandardScheme();
            }
        }

        private static class extend_resultStandardScheme extends StandardScheme<extend_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, extend_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.success = new RequestReturn();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, extend_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class extend_resultTupleSchemeFactory implements SchemeFactory {
            public extend_resultTupleScheme getScheme() {
                return new extend_resultTupleScheme();
            }
        }

        private static class extend_resultTupleScheme extends TupleScheme<extend_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, extend_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    struct.success.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, extend_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = new RequestReturn();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class withdraw_args implements org.apache.thrift.TBase<withdraw_args, withdraw_args._Fields>, java.io.Serializable, Cloneable, Comparable<withdraw_args> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdraw_args");
        private static final org.apache.thrift.protocol.TField SRC_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("srcAddr", org.apache.thrift.protocol.TType.STRING, (short) 1);
        private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short) 2);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __ID_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new withdraw_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new withdraw_argsTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SRC_ADDR, new org.apache.thrift.meta_data.FieldMetaData("srcAddr", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdraw_args.class, metaDataMap);
        }

        public String srcAddr; // required
        public int id; // required
        private byte __isset_bitfield = 0;

        public withdraw_args() {
        }

        public withdraw_args(
                String srcAddr,
                int id) {
            this();
            this.srcAddr = srcAddr;
            this.id = id;
            setIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public withdraw_args(withdraw_args other) {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetSrcAddr()) {
                this.srcAddr = other.srcAddr;
            }
            this.id = other.id;
        }

        public withdraw_args deepCopy() {
            return new withdraw_args(this);
        }

        @Override
        public void clear() {
            this.srcAddr = null;
            setIdIsSet(false);
            this.id = 0;
        }

        public String getSrcAddr() {
            return this.srcAddr;
        }

        public withdraw_args setSrcAddr(String srcAddr) {
            this.srcAddr = srcAddr;
            return this;
        }

        public void unsetSrcAddr() {
            this.srcAddr = null;
        }

        /** Returns true if field srcAddr is set (has been assigned a value) and false otherwise */
        public boolean isSetSrcAddr() {
            return this.srcAddr != null;
        }

        public void setSrcAddrIsSet(boolean value) {
            if (!value) {
                this.srcAddr = null;
            }
        }

        public int getId() {
            return this.id;
        }

        public withdraw_args setId(int id) {
            this.id = id;
            setIdIsSet(true);
            return this;
        }

        public void unsetId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
        }

        /** Returns true if field id is set (has been assigned a value) and false otherwise */
        public boolean isSetId() {
            return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
        }

        public void setIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SRC_ADDR:
                    if (value == null) {
                        unsetSrcAddr();
                    } else {
                        setSrcAddr((String) value);
                    }
                    break;

                case ID:
                    if (value == null) {
                        unsetId();
                    } else {
                        setId((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SRC_ADDR:
                    return getSrcAddr();

                case ID:
                    return Integer.valueOf(getId());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SRC_ADDR:
                    return isSetSrcAddr();
                case ID:
                    return isSetId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof withdraw_args)
                return this.equals((withdraw_args) that);
            return false;
        }

        public boolean equals(withdraw_args that) {
            if (that == null)
                return false;

            boolean this_present_srcAddr = true && this.isSetSrcAddr();
            boolean that_present_srcAddr = true && that.isSetSrcAddr();
            if (this_present_srcAddr || that_present_srcAddr) {
                if (!(this_present_srcAddr && that_present_srcAddr))
                    return false;
                if (!this.srcAddr.equals(that.srcAddr))
                    return false;
            }

            boolean this_present_id = true;
            boolean that_present_id = true;
            if (this_present_id || that_present_id) {
                if (!(this_present_id && that_present_id))
                    return false;
                if (this.id != that.id)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(withdraw_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSrcAddr()).compareTo(other.isSetSrcAddr());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSrcAddr()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcAddr, other.srcAddr);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("withdraw_args(");
            boolean first = true;

            sb.append("srcAddr:");
            if (this.srcAddr == null) {
                sb.append("null");
            } else {
                sb.append(this.srcAddr);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("id:");
            sb.append(this.id);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SRC_ADDR((short) 1, "srcAddr"),
            ID((short) 2, "id");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 1: // SRC_ADDR
                        return SRC_ADDR;
                    case 2: // ID
                        return ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class withdraw_argsStandardSchemeFactory implements SchemeFactory {
            public withdraw_argsStandardScheme getScheme() {
                return new withdraw_argsStandardScheme();
            }
        }

        private static class withdraw_argsStandardScheme extends StandardScheme<withdraw_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, withdraw_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // SRC_ADDR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.srcAddr = iprot.readString();
                                struct.setSrcAddrIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.id = iprot.readI32();
                                struct.setIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, withdraw_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.srcAddr != null) {
                    oprot.writeFieldBegin(SRC_ADDR_FIELD_DESC);
                    oprot.writeString(struct.srcAddr);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(ID_FIELD_DESC);
                oprot.writeI32(struct.id);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class withdraw_argsTupleSchemeFactory implements SchemeFactory {
            public withdraw_argsTupleScheme getScheme() {
                return new withdraw_argsTupleScheme();
            }
        }

        private static class withdraw_argsTupleScheme extends TupleScheme<withdraw_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, withdraw_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSrcAddr()) {
                    optionals.set(0);
                }
                if (struct.isSetId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSrcAddr()) {
                    oprot.writeString(struct.srcAddr);
                }
                if (struct.isSetId()) {
                    oprot.writeI32(struct.id);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, withdraw_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.srcAddr = iprot.readString();
                    struct.setSrcAddrIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.id = iprot.readI32();
                    struct.setIdIsSet(true);
                }
            }
        }

    }

    public static class withdraw_result implements org.apache.thrift.TBase<withdraw_result, withdraw_result._Fields>, java.io.Serializable, Cloneable, Comparable<withdraw_result> {
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("withdraw_result");
        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);
        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        static {
            schemes.put(StandardScheme.class, new withdraw_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new withdraw_resultTupleSchemeFactory());
        }

        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(withdraw_result.class, metaDataMap);
        }

        public boolean success; // required
        private byte __isset_bitfield = 0;

        public withdraw_result() {
        }

        public withdraw_result(
                boolean success) {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public withdraw_result(withdraw_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public withdraw_result deepCopy() {
            return new withdraw_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public withdraw_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Boolean.valueOf(isSuccess());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof withdraw_result)
                return this.equals((withdraw_result) that);
            return false;
        }

        public boolean equals(withdraw_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            return 0;
        }

        @Override
        public int compareTo(withdraw_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("withdraw_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch (fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        private static class withdraw_resultStandardSchemeFactory implements SchemeFactory {
            public withdraw_resultStandardScheme getScheme() {
                return new withdraw_resultStandardScheme();
            }
        }

        private static class withdraw_resultStandardScheme extends StandardScheme<withdraw_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, withdraw_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true) {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, withdraw_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class withdraw_resultTupleSchemeFactory implements SchemeFactory {
            public withdraw_resultTupleScheme getScheme() {
                return new withdraw_resultTupleScheme();
            }
        }

        private static class withdraw_resultTupleScheme extends TupleScheme<withdraw_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, withdraw_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, withdraw_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
